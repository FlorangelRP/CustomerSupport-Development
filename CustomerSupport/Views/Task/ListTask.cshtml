@using CustomerSupport.Models
@model CustomerSupport.Models.MTask
@{
    ViewBag.Title = "Listado de Tickets";
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Action = "ListTask";


}

<div class="card card-primary">
    <div class="card-header">
        <h3 class="card-title">@ViewBag.Title</h3>
    </div>
    <div class="card-body">

        @{
            MSerAcces perm = null;
            if (Session["Usuario"] != null)
            {
                perm = (((MSerUser)Session["Usuario"])).UserAcces.Where(X => X.Action == @ViewBag.Action).FirstOrDefault();
            }
        }

        @if (perm != null)
        {
            if (perm.Create == true)
            {
                <div class="row">
                    <div class=" col-2">

                        <div class="btn_option pt-0" style=" vertical-align: central"><button class="searchRow border-0" data-toggle="tooltip" data-placement="top" title="Ver Cronograma" onclick="location.href='@Url.Action("ListCalendar", "Calendar")';return false;"><i class="far fa-calendar-alt"></i></button></div>
                    </div>

                    <div class="col-md-6">
                        <div class="form-group">
                            @*<div class="card">
                            <div class="card-header">
                                <h5 class="card-title mt-0 mb-0">Leyenda</h5>
                            </div>
                            <div class="card-body">*@
                            <fieldset>

                                <span class="btn-group">
                                    <input class="dot border-0 m-1" style="background-color: #61bd4f;">
                                    <label style="font-size:12px;">En Proceso</label>
                                </span>
                                <span class="btn-group">
                                    <input class="dot border-0 m-1" style="background-color: #ff9f1a; ">
                                    <label style="font-size:12px;">En Espera de Feedback</label>
                                </span>
                                <span class="btn-group">
                                    <input class="dot border-0 m-1" style="background-color: #f2d600;">
                                    <label style="font-size:12px;">Por Vencer</label>
                                </span>
                                <span class="btn-group">
                                    <input class="dot border-0 m-1" style="background-color: #eb5a46;">
                                    <label style="font-size:12px;">Vencido</label>
                                </span>
                            </fieldset>
                            @*</div>
                            </div>*@
                        </div>
                    </div>
                    <div class="col-md-4  text-right">
                        <div class="text-right">

                            <button class="white_btn" onclick="location.href='@Url.Action("AddTask", "Task")';return false;">Agregar</button>
                        </div>
                    </div>
                </div>
                <br />
            }
        }
        <div class="row">
            <div class="col-md-12">
                <div class="control-label">Opciones de Filtro:</div>
            </div>
        </div>
        <div class="row shadow-sm p-3 m-1 bg-white rounded">
            <div class="card-body">
                <div class="row ">
                    <div class="col-md-2">
                        <div class="form-group">
                            <div class="control-label">Número:</div>
                            @Html.TextBoxFor(model => model.IdTask, new { @type = "number", @class = "input-numeric inputLostFocus form-control rounded-0", @id = "inIdTask", @Value = "" })
                            @Html.ValidationMessageFor(model => model.IdTask, "", new { @maxlength = "15", @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="form-group">
                            <div class="control-label">Fecha Inicio:</div>
                            @Html.HiddenFor(model => model.DateIni, new { @id = "dttDateIni", @type = "date", @class = "form-control float-right" })
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="form-group">
                            <div class="control-label">Fecha Fin:</div>
                            @Html.HiddenFor(model => model.DateEnd, new { @id = "dttDateEnd", @type = "date", @class = "form-control float-right" })
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            <div class="control-label">Título:</div>
                            @Html.TextBoxFor(model => model.Tittle, new { @id = "strTittle", @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.Tittle, "", new { @maxlength = "500", @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-2">
                        <div class="form-group">
                            <div class="control-label">Tipo:</div>
                            <select id="lst_IdTypeTask" class="form-control" style="width: 100%;"></select>
                            @Html.HiddenFor(model => model.IdTypeTask, new { @id = "inIdTypeTask" })
                            @Html.ValidationMessageFor(model => model.IdTypeTask, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-md-2">
                        <div class="form-group">
                            <div class="control-label">Prioridad:</div>
                            <select id="lst_Priority" class="form-control" style="width: 100%;"></select>
                            @Html.HiddenFor(model => model.IdPriority, new { @id = "inIdPriority" })
                            @Html.ValidationMessageFor(model => model.IdPriority, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="form-group">
                            <div class="control-label">Estado:</div>
                            <select id="lst_IdStatus" class="form-control" style="width: 100%;"></select>
                            @Html.HiddenFor(model => model.IdStatus, new { @id = "inIdStatus" })
                            @Html.ValidationMessageFor(model => model.IdStatus, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="col-md-4">
                        <div class="form-group">
                            <div class="control-label">Responsable:</div>
                            <select class="select2" onchange="filtrarPersona(this.value)" id="filtropersona" data-placeholder="Seleccione" name="IdPerson"></select>
                            @Html.HiddenFor(model => model.IdPersonEmployee, new { @id = "IdPersonEmployee," })
                            @Html.ValidationMessageFor(model => model.IdPersonEmployee, "", new { @class = "text-danger" })

                        </div>
                    </div>

                </div>
                <div class="row">

                    <div class="col-md-2">
                        <div class="form-group">
                            <div class="control-label"># Servicio:</div>
                            @Html.TextBoxFor(model => model.IdServiceRequest, new { @id = "IdServiceRequest", @class = "input-numeric inputLostFocus form-control rounded-0" })
                            @Html.ValidationMessageFor(model => model.IdServiceRequest, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-md-2">
                        <div class="form-group">
                            <div class="control-label"># Ticket Asociado:</div>
                            @Html.TextBoxFor(model => model.IdFatherTask, new { @id = "IdFatherTask", @class = "input-numeric inputLostFocus form-control rounded-0" })
                            @Html.ValidationMessageFor(model => model.IdFatherTask, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="form-group">
                            <div class="control-label">Colaborador:</div>
                            <select class="select2" onchange="filtrarColaborador(this.value)" id="filtrocolaborador" data-placeholder="Seleccione" name="IdColaborator"></select>
                            @Html.HiddenFor(model => model.IdColaborator, new { @id = "IdColaborator," })
                            @Html.ValidationMessageFor(model => model.IdColaborator, "", new { @class = "text-danger" })

                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="form-group">
                            <div class="control-label">Seguidor:</div>
                            <select class="select2" onchange="filtrarSeguidor(this.value)" id="filtroseguidor" data-placeholder="Seleccione" name="Idseguidor"></select>
                            @Html.HiddenFor(model => model.IdFollower, new { @id = "IdSeguidor," })
                            @Html.ValidationMessageFor(model => model.IdFollower, "", new { @class = "text-danger" })

                        </div>
                    </div>
                    <div class="col-md-2">
                        <div class="form-group">
                            <br />
                            @*<button class="white_btn small-btn" onclick="FiltrarTicket()" ;return false;">Aceptar</button>*@
                            <div class="btn_option pt-0" style=" vertical-align: bottom"><button class="searchRow border-0" data-toggle="tooltip" data-placement="top" title="Filtrar" onclick="FiltrarTicket()" ;return false;"><i class="fas fa-filter"></i></button></div>
                        </div>
                    </div>

                </div>
                @*<div class="row">
                </div>*@
            </div>
        </div>

        <br />

        <div class="row">
            @*col-lg-12 col-md-12 col-sm-12 col-12 align-self-center"*@

            <div class="col-lg-12 col-md-12 col-sm-12 col-12 align-self-center">
                @using (Html.BeginForm("ListTask", "Task", FormMethod.Post))
                {
                    <div class="table-responsive" style="width:99%">
                        @*<div class="container">*@
                            <table id="TTask" class="table table-bordered table-striped">
                                <thead>
                                    <tr>
                                        <th>Nro</th>
                                        <th>Tipo</th>
                                        <th>Prioridad</th>
                                        <th>Título</th>
                                        <th>Estado</th>
                                        <th>Responsable</th>
                                        <th>Colaborador</th>
                                        <th>Seguidor</th>
                                        @*<th>Responsable</th>*@
                                        <th>Creador</th>
                                        <th>Fecha de Creación</th>
                                        <th>Ultima Actualización</th>
                                        @if (perm != null)
                                        {
                                            if (perm.Search == true || perm.Edit == true)
                                            {
                                                <th class="text-center" colspan="2">Opciones</th>
                                            }
                                        }
                                    </tr>
                                </thead>
                            </table>
                        @*</div>*@
                    </div>
                    @Html.HiddenFor(model => model.IdTask, new { @id = "hidd_IdTask" })
                    @Html.Hidden("submit")
                }
            </div>
        </div>

    </div>
</div>

@section Scripts {

    <script src="~/Content/assets/plugins/datatables/jquery.dataTables.min.js"></script>
    <script src="~/Content/assets/plugins/datatables-bs4/js/dataTables.bootstrap4.min.js"></script>
    <script src="~/Content/assets/plugins/datatables-responsive/js/dataTables.responsive.min.js"></script>
    <script src="~/Content/assets/plugins/datatables-responsive/js/responsive.bootstrap4.min.js"></script>
    <script src="~/Content/assets/plugins/datatables-buttons/js/dataTables.buttons.min.js"></script>
    <script src="~/Content/assets/plugins/datatables-buttons/js/buttons.bootstrap4.min.js"></script>
    <script src="~/Content/assets/plugins/datatables-buttons/js/buttons.html5.min.js"></script>
    <script src="~/Content/assets/plugins/datatables-buttons/js/buttons.print.min.js"></script>
    <script src="~/Content/assets/plugins/datatables-buttons/js/buttons.colVis.min.js"></script>
    <script src="~/Content/assets/plugins/datatables-buttons/js/buttons.colVis.min.js"></script>
     <script src="https://cdn.datatables.net/rowgroup/1.1.4/js/dataTables.rowGroup.min.js"></script>

    <script>
        var ListPersons = [];
        var ListColaborador = [];
        var ListSeguidor = [];
        var collapsedGroups = {};
        var top = '';
        var middle = '';
        var parent = '';
        //debugger;

        var Permis = @Html.Raw(Json.Encode(perm));
        Buscar = Permis.Search;
        Editar = Permis.Edit;

        function FiltrarTicket()
        {
            //debugger;
            var startDate = new Date($('#dttDateIni').val());
            var endDate = new Date($('#dttDateEnd').val());

            if (startDate > endDate) {
                toastr.error("La fecha inicial No puede ser Mayor a la fecha Final");
                return;
            }
          /*  debugger;*/
            @*var meses = Array.from(@Html.Raw(Json.Encode(Model.LisMonth)));*@
            var intIdTask = $("#inIdTask").val();
            var DateI = $("#dttDateIni").val();
            var DateE = $("#dttDateEnd").val();
            var strIdTypeTask = $("#lst_IdTypeTask").val();
            var strIdPriority = $("#lst_Priority").val();
            var strTitt = $("#strTittle").val();
            var intIdStatus = $("#lst_IdStatus").val();
            var intIdResponsable = $("#filtropersona").val();
            var intIdServiceRequest = $("#IdServiceRequest").val();
            var intIdFatherTask = $("#IdFatherTask").val();
            var intIdColaborator = $("#filtrocolaborador").val();
            var intIdFollower = $("#filtroseguidor").val();


            var datos = {
                IdTask: intIdTask,
                DateIni: DateI,
                DateEnd: DateE,
                IdTypeTask: strIdTypeTask,
                IdPriority: strIdPriority,
                IdStatus: intIdStatus,
                Tittle: strTitt,
                IdPersonEmployee: intIdResponsable,
                IdServiceRequest:intIdServiceRequest,
                IdFatherTask:intIdFatherTask,
                IdColaborator: intIdColaborator,
                IdFollower: intIdFollower
            };

            table = $('#TTask').DataTable({
                'ajax': {
                    'url': '@Url.Action("GetListTask", "Task")' ,
                    'type': 'GET',
                    'dataType': 'json',
                    'data': datos,
                    'dataSrc': ''
                },
                'columns':
                    [
                        { 'data': 'IdTask', 'autowidth': true },
                        { 'data': 'TypeTask', 'autowidth': true },
                        { 'data': 'PriorityTask', 'autowidth': true },
                        { 'data': 'Tittle', 'autowidth': true },
                        { 'data': 'Status', 'autowidth': true },
                        {
                            'data': null, render: function (data, type, row)
                            {
                                if (data != null) {
                                    if (row.PersonEmployeeName == null && row.PersonEmployeeLastName == null) {
                                        return '';
                                    } else {
                                        var name = row.PersonEmployeeName + '  ' + row.PersonEmployeeLastName;
                                        return name;
                                    }
                                } else
                                    return '';
                            }
                        },
                        { 'data': 'Colaborator', 'autowidth': true },
                        { 'data': 'Follower', 'autowidth': true },
                        { 'data': 'Creator', 'autowidth': true },
                        {
                            'data': 'CreationDate',
                            'render': function (jsonDate) {

                                if (jsonDate != null) {
                                    var date = new Date(parseInt(jsonDate.substr(6)));
                                    var month = ("0" + (date.getMonth() + 1)).slice(-2);
                                    return ("0" + date.getDate()).slice(-2) + '-' + month + '-' + date.getFullYear();
                                }
                                else {
                                    return '';
                                }
                            }
                        },
                        {
                            'data': 'OperationDate',
                            'render': function (jsonDate) {

                                if (jsonDate != null) {
                                    var date = new Date(parseInt(jsonDate.substr(6)));
                                    var month = ("0" + (date.getMonth() + 1)).slice(-2);
                                    return ("0" + date.getDate()).slice(-2) + '-' + month + '-' + date.getFullYear();
                                }
                                else {
                                    return '';
                                }
                            }
                        },
                        {
                            'data': null, render: function (data, type, row) {
                                if (data != null) {
                                    if (row.IdTask == null) {
                                        return '';
                                    } else {
                                        //return '<div class="btn_option pt-0"><a class="editRow"><i class="fas fa-edit"></i></a></div>';
                                        var link = '<div class="btn_option pt-0" style=" vertical-align: central"><button class="editRow border-0" data-toggle="tooltip" data-placement="top" title="Editar" name="linkEdit_&"><i class="fas fa-edit"></i></button></div>';
                                        link = link.replace("&", row.IdTask);
                                        return link;
                                    }
                                }
                            }, 'autowidth': true
                        },
                        {
                            'data': null, render: function (data, type, row) {
                                if (data != null) {
                                    if (row.IdTask == null) {
                                        return '';
                                    } else {
                                        //return '<div class="btn_option pt-0"><a class="searchRow"><i class="fas fa-search"></i></a></div>';
                                        var link = '<div class="btn_option pt-0" style=" vertical-align: central"><button class="searchRow border-0" data-toggle="tooltip" data-placement="top" title="Consultar" name="linkSearch_&"><i class="fas fa-search"></i></button></div>';
                                        link = link.replace("&", row.IdTask);
                                        return link;
                                    }
                                }
                            }, 'autowidth': true
                        },
                    ],
                "rowGroup": {
                    dataSrc: /*['TypeTask', 'PriorityTask', 'Status'],*/
                        function (row) {
                        if (row != null) {
                            if (row.PersonEmployeeName == null && row.PersonEmployeeLastName == null) {
                                return '';
                            } else {
                                var name = row.PersonEmployeeName + '  ' + row.PersonEmployeeLastName;
                                return name;
                            }
                        } else
                            return '';
                    }

                    ,
                     startRender: function (rows, group, level) {
                        var all;

                        if (level === 0) {
                            top = group;
                            all = group;
                            middle = '';
                        } else {
                            // if parent collapsed, nothing to do
                            if (!!collapsedGroups[top]) {
                                return;
                            }
                            if (level === 1) {
                                middle = group
                            }
                            all = top + middle + group;
                        }
                        console.log(group, level, all)

                        var collapsed = !!collapsedGroups[all];

                        rows.nodes().each(function (r) {
                            r.style.display = collapsed ? 'none' : '';
                        });

                        // Add category name to the <tr>. NOTE: Hardcoded colspan
                        return $('<tr/>')
                            .append('<td colspan="12">' + group + ' (' + rows.count() + ')</td>')
                            .attr('data-name', all)
                            .toggleClass('collapsed', collapsed);

                    }
                },
                "columnDefs": [
                    { "targets": 0, "width": "5%" },
                    { "targets": 1, "width": "5%" }, //, "font-size": "80%"
                    { "targets": 2, "width": "10%" },
                    { "targets": 3, "width": "20%" },
                    { "targets": 4, "width": "10%" },
                    { "targets": 5, "width": "0%" , "visible": false },
                    { "targets": 6, "width": "10%" },
                    { "targets": 7, "width": "10%" },
                    { "targets": 8, "width": "10%" },
                    { "targets": 9, "width": "10%" },
                    { "targets": 10, "width": "5%", "bVisible": Editar },
                    { "targets": 11, "width": "5%","bVisible": Buscar },
                ],
                "order": [[5, 'asc'],[0,'desc']],
                "createdRow": function (row, data, dataIndex) {

                    /*debugger;*/
                    var today = new Date(parseInt(Date.now()));
                    var currentHour = today.getHours();
                    var currentMinutes = today.getMinutes();

                    var taskHour = data['HourEnd'].Hours
                    var taskMinute = data['HourEnd'].Minutes;

                    if (data['DateEnd'] != null) {
                        var date = new Date(parseInt(data['DateEnd'].substr(6)));
                        //var month = ("0" + (date.getMonth() + 1)).slice(-2);
                        //d = "0" + date.getDate()).slice(-2) + '-' + month + '-' + date.getFullYear();
                        var t2 = today.getTime();
                        var t1 = date.getTime();

                        var Difday = parseInt((t2 - t1) / (24 * 3600 * 1000));
                    }



                    if (data['Status'] == 'En Proceso') {
                       /* $(row).css('background-color', '#61bd4f');*/
                        $($(row).find("td")[0]).css("background-color", "#61bd4f");
                    }
                    else if (data['Status'] == 'En Espera de Feedback') {
                        /*  $(row).css('background-color', '#ff9f1a');*/
                        $($(row).find("td")[0]).css("background-color", "#ff9f1a");
                    }
                    else if (data['Status'] != 'Finalizado'  && (date < today || (date == today && ((taskHour < currentHour) || (taskHour == currentHour && taskMinute < currentMinutes))))) {
                       /* $(row).css('background-color', '#eb5a46');*/
                        $($(row).find("td")[0]).css("background-color", "#eb5a46");
                    }
                    else if (data['Status'] != 'Finalizado' && ((Difday == 1 || (Difday == 0 && (((currentHour - taskHour) == 1) ||
                        (((currentHour - taskHour) == 0) && (((currentMinutes - taskMinute) <= 30) && (currentMinutes - taskMinute) >0)())))))) {

                      /*  $(row).css('background-color', '#f2d600');*/
                        $($(row).find("td")[0]).css("background-color", "#f2d600");
                        }
                },
                "bAutoWidth": false,
                "bInfo": false,
                "bDestroy": true,
                "language": {
                    "sProcessing": "Procesando...",
                    "sLengthMenu": "Mostrar _MENU_ registros",
                    "sZeroRecords": "No se encontraron resultados",
                    "sEmptyTable": "No existen Pedidos Registrados",
                    "sInfo": "Mostrando registros del _START_ al _END_ de un total de _TOTAL_ registros",
                    "sInfoEmpty": "Mostrando registros del 0 al 0 de un total de 0 registros",
                    "sInfoFiltered": "(filtrado de un total de _MAX_ registros)",
                    "sInfoPostFix": "",
                    "sSearch": "Buscar:",
                    "sUrl": "",
                    "sInfoThousands": ",",
                    "sLoadingRecords": "Cargando...",
                    "oPaginate": {
                        "sFirst": "Primero",
                        "sLast": "Último",
                        "sNext": "Siguiente",
                        "sPrevious": "Anterior"
                    },
                    "oAria": {
                        "sSortAscending": ": Activar para ordenar la columna de manera ascendente",
                        "sSortDescending": ": Activar para ordenar la columna de manera descendente"
                    }
                }

            });


        }

        function ObtenerPersonas() {

            //debugger;
             $.ajax({
                    type: "GET",
                 url: '@Url.Action("GetListPerson", "Person")?idPersonType=2&blnUser=true',
                    data: "{}",
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    //global: false,
                    //async: false,
                    success: function (data) {
                        var itemArray = {};
                        itemArray.IdPerson = "";
                        itemArray.LastName = "";
                        itemArray.Name = "";
                        itemArray.NumIdentification = "";
                        data.push(itemArray);
                        data.reverse();
                        ListPersons = data;
                        ListColaborador = data;
                        ListSeguidor = data;

                        if (ListPersons.length > 0) {

                            var persona = $("#filtropersona")[0];
                            //debugger;
                            var option = $(document.createElement('option'));
                            option.text("Seleccione");
                            option.val("0");
                            $("#filtropersona").append(option);

                            var Colaborador = $("#filtrocolaborador")[0];
                            //debugger;
                            var option = $(document.createElement('option'));
                            option.text("Seleccione");
                            option.val("0");
                            $("#filtrocolaborador").append(option);

                            for (i = 0; i < ListPersons.length; i++) {

                                if (ListPersons[i].IdPerson != "" && ListPersons[i].LastName != "") {
                                    var Name = " ";
                                    if (ListPersons[i].Name != "") {
                                        Name = " " + ListPersons[i].Name;
                                    }

                                    persona[i + 1] = new Option(ListPersons[i].NumIdentification + " - " + ListPersons[i].LastName + Name, ListPersons[i].IdPerson, "", "");

                                    Colaborador[i + 1] = new Option(ListPersons[i].NumIdentification + " - " + ListPersons[i].LastName + Name, ListPersons[i].IdPerson, "", "");
                                }

                            }

                        }

                        //if (ListColaborador.length > 0) {

                        //    var Colaborador = $("#filtrocolaborador")[0];
                        //    //debugger;
                        //    var option = $(document.createElement('option'));
                        //    option.text("Seleccione");
                        //    option.val("0");
                        //    $("#filtrocolaborador").append(option);

                        //    for (i = 0; i < ListColaborador.length; i++) {

                        //        if (ListColaborador[i].IdPerson != "" && ListColaborador[i].LastName != "") {
                        //            var Name = " ";
                        //            if (ListColaborador[i].Name != "") {
                        //                Name = " " + ListColaborador[i].Name;
                        //            }

                        //            Colaborador[i + 1] = new Option(ListColaborador[i].NumIdentification + " - " + ListColaborador[i].LastName + Name, ListColaborador[i].IdPerson, "", "");

                        //        }

                        //    }

                        //}

                        if (ListSeguidor.length > 0) {

                            var Seguidor = $("#filtroseguidor")[0];
                            //debugger;
                            var option = $(document.createElement('option'));
                            option.text("Seleccione");
                            option.val("0");
                            $("#filtroseguidor").append(option);

                            for (i = 0; i < ListSeguidor.length; i++) {

                                if (ListSeguidor[i].IdPerson != "" && ListSeguidor[i].LastName != "") {
                                    var Name = " ";
                                    if (ListSeguidor[i].Name != "") {
                                        Name = " " + ListSeguidor[i].Name;
                                    }

                                    Seguidor[i + 1] = new Option(ListSeguidor[i].NumIdentification + " - " + ListSeguidor[i].LastName + Name, ListSeguidor[i].IdPerson, "", "");

                                }

                            }

                        }
                    }
            });



        }
        ObtenerPersonas();
        FiltrarTicket();
        function cargarDataPerson(IdPerson, lstPersons) {
            //debugger;
            if (IdPerson == "" || IdPerson == "0") { return false; }
            //debugger;
            var objPerson = lstPersons.find((m) => m.IdPerson == IdPerson);
            var fecha = new Date();
        }

        function filtrarPersona(person) {
            //debugger;
            var SelecCodeValue = person.trim();
            cargarDataPerson(SelecCodeValue, ListPersons);
        }

        function filtrarColaborador(person) {
            //debugger;
            var SelecCodeValue = person.trim();
            cargarDataPerson(SelecCodeValue, ListColaborador);
        }

        function filtrarSeguidor(person) {
            //debugger;
            var SelecCodeValue = person.trim();
            cargarDataPerson(SelecCodeValue, ListSeguidor);
        }

        $('#TTask').on("click", "button.editRow", function () {
            //debugger;
            var data = table.row($(this).parents("tr")).data();
            $("#hidd_IdTask").val(data.IdTask);
            $("#submit").val("editRow");
            location.href = '@Url.Action("ListTask", "Task")';
        });

        $('#TTask').on("click", "button.searchRow", function () {
            //debugger;
            var data = table.row($(this).parents("tr")).data();
            $("#hidd_IdTask").val(data.IdTask);
            $("#submit").val("searchRow");
            location.href = '@Url.Action("ListTask", "Task")';
        });

        $(document).ready(function () {


            //debugger;
            $('.select2').select2({ width: '100%' });

            $("#lst_Priority").on('change', function () {
                //debugger;
                var selectValue = $(this).val();
                //$("#inpIdIdentificationType").val(selectValue);
                changeCodeInputHiddenList("lst_Priority", "inIdPriority", selectValue);
            });

            $("#lst_IdStatus").on('change', function () {
                //debugger;
                var selectValue = $(this).val();
                //$("#inpIdIdentificationType").val(selectValue);
                changeCodeInputHiddenList("lst_IdStatus", "inIdStatus", selectValue);
            });

            $("#lst_IdTypeTask").on('change', function () {
                //debugger;
                var selectValue = $(this).val();
                //$("#inpIdIdentificationType").val(selectValue);
                changeCodeInputHiddenList("lst_IdTypeTask", "inIdTypeTask", selectValue);
            });

            $.ajax({
                type: "GET",
                url: '@Url.Action("GetTableCatalog", "TableCatalog")?idTable=' +"PRIORITYTASK",
                data: "{}",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (msg) {

                    var option = $(document.createElement('option'));
                    option.text("Seleccione");
                    option.val("0");
                    $("#lst_Priority").append(option);

                    $(msg).each(function () {
                        var option = $(document.createElement('option'));

                        option.text(this.DetailDesc);
                        option.val(this.IdCatalogDetail); //Identity

                        $("#lst_Priority").append(option);
                    });

                    document.getElementById('lst_Priority').value = "0";

                    changeCodeInputHiddenList("lst_Priority", "inIdPriority", "");

                },
                error: function (msg) {
                    $("#error > span").text("Error al llenar lista de prioridad");
                }

            });

            $.ajax({
                type: "GET",
                 url: '@Url.Action("GetTableCatalog", "TableCatalog")?idTable=' +"STATETASK",
                data: "{}",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (msg) {

                    var option = $(document.createElement('option'));
                    option.text("Seleccione");
                    option.val("0");
                    $("#lst_IdStatus").append(option);

                    $(msg).each(function () {
                        var option = $(document.createElement('option'));

                        option.text(this.DetailDesc);
                        option.val(this.IdCatalogDetail); //Identity

                        $("#lst_IdStatus").append(option);
                    });

                    document.getElementById('lst_IdStatus').value = "0";

                    changeCodeInputHiddenList("lst_IdStatus", "inIdStatus", "");

                },
                error: function (msg) {
                    $("#error > span").text("Error al llenar lista de Estado");
                }

            });

            $.ajax({
                type: "GET",
                 url: '@Url.Action("GetTableCatalog", "TableCatalog")?idTable=' +"TYPETASK",
                data: "{}",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (msg) {

                    var option = $(document.createElement('option'));
                    option.text("Seleccione");
                    option.val("0");
                    $("#lst_IdTypeTask").append(option);

                    $(msg).each(function () {
                        var option = $(document.createElement('option'));

                        option.text(this.DetailDesc);
                        option.val(this.IdCatalogDetail); //Identity

                        $("#lst_IdTypeTask").append(option);
                    });

                    document.getElementById('lst_IdTypeTask').value = "0";

                    changeCodeInputHiddenList("lst_IdTypeTask", "inIdTypeTask", "");

                },
                error: function (msg) {
                    $("#error > span").text("Error al llenar lista de Tipos de tarea");
                }

            });

            function changeCodeInputHiddenList(idDropDownList, idInputHidden, valCode) {
                //debugger;
                if (valCode === "") {

                    var CodeAntSelected = document.getElementById(idInputHidden).value;

                    if (CodeAntSelected != "") {
                        $("#" + idDropDownList + " option[value='" + CodeAntSelected + "']").attr("selected", true);
                        $("#" + idInputHidden).val(CodeAntSelected);
                    }
                    else {
                        var CodeActual = $("#" + idDropDownList).val();
                        $("#" + idInputHidden).val(CodeActual);
                    }

                }
                else {
                    $("#" + idInputHidden).val(valCode);
                }

            }

            $('#TTask tbody').on('click', 'tr.dtrg-start', function () {
                var name = $(this).data('name');
                collapsedGroups[name] = !collapsedGroups[name];
                table.draw(false);
            });

        });

    </script>
}
