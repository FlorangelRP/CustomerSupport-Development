@using CustomerSupport.Models
@model CustomerSupport.Models.MTask

@{
    ViewBag.Title = "Crear Asignación de Actividades";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="card card-primary">
    <div class="card-header">
        <h3 class="card-title">@ViewBag.Title</h3>
    </div>
    <div class="card-body">
        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()
            <div class="m-0 row justify-content-center">
                <div class="form-horizontal col-md-10">

                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                    <div class="row">
                        <div class="col-md-4">
                            <div class="form-group">
                                <div class="control-label">Prioridad:</div>
                                <select id="lst_Priority" class="form-control" style="width: 100%;"></select>
                                @Html.HiddenFor(model => model.IdPriority, new { @id = "inIdPriority" })
                                @Html.ValidationMessageFor(model => model.IdPriority, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="col-md-4">
                            <div class="form-group">
                                <div class="control-label">Tipo:</div>
                                <select id="lst_IdTypeTask" class="form-control" style="width: 100%;"></select>
                                @Html.HiddenFor(model => model.IdTypeTask, new { @id = "inIdTypeTask" })
                                @Html.ValidationMessageFor(model => model.IdTypeTask, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="col-md-4">
                            <div class="form-group">
                                <div class="control-label">Estado:</div>
                                <select id="lst_IdStatus" class="form-control" style="width: 100%;"></select>
                                @Html.HiddenFor(model => model.IdStatus, new { @id = "inIdStatus" })
                                @Html.ValidationMessageFor(model => model.IdStatus, "", new { @class = "text-danger" })
                            </div>
                        </div>

                    </div>
                    <div class="row">
                        <div class="col-md-12">
                            <div class="form-group">
                                <div class="control-label">Título:</div>
                                @Html.TextBoxFor(model => model.Tittle, new { @id = "strTittle", @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.Tittle, "", new { @maxlength = "500", @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-8">
                            <div class="form-group">
                                <div class="control-label">Lugar:</div>
                                @Html.TextBoxFor(model => model.Place, new { @id = "strPlace", @class = "form-control" })
                                @Html.ValidationMessageFor(model => model.Place, "", new { @maxlength = "500", @class = "text-danger" })
                            </div>
                        </div>

                        <div class="col-md-2">
                            <div class="form-group">
                                <div class="control-label"># Servicio:</div>
                                @Html.TextBoxFor(model => model.IdServiceRequest, new { @id = "IdServiceRequest", @class = "input-numeric inputLostFocus form-control rounded-0" })
                                @Html.ValidationMessageFor(model => model.IdServiceRequest, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="col-md-2">
                            <div class="form-group">
                                <div class="control-label"># Padre:</div>
                                @Html.TextBoxFor(model => model.IdFatherTask, new { @id = "IdFatherTask", @class = "input-numeric inputLostFocus form-control rounded-0" })
                                @Html.ValidationMessageFor(model => model.IdFatherTask, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-12">
                            <div class="form-group">
                                <div class="control-label">Descripción:</div>
                                @Html.TextAreaFor(model => model.Activity, new { @class = "form-control", @rows = 3, @cols = 10 })
                                @Html.ValidationMessageFor(model => model.Activity, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-3">
                            <div class="form-group">
                                <div class="control-label">Fecha Inicio:</div>
                                @Html.TextBoxFor(model => model.DateIni, "{0:d}", new { @class = "form-control", @type = "date", @id = "dttDateIni" })
                                @Html.ValidationMessageFor(model => model.DateIni, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-group">
                                <div class="control-label">Fecha Fin:</div>
                                @Html.TextBoxFor(model => model.DateEnd, "{0:d}", new { @class = "form-control", @type = "date", @id = "dttDateEnd" })
                                @Html.ValidationMessageFor(model => model.DateEnd, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-group">
                                <div class="control-label">Hora Inicio:</div>
                                @Html.TextBoxFor(model => model.HourIni, new { @class = "form-control", @type = "time", @id = "HourIni" })
                                @Html.ValidationMessageFor(model => model.HourIni, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-group">
                                <div class="control-label">Hora Fin:</div>
                                @Html.TextBoxFor(model => model.HourEnd, new { @class = "form-control", @type = "time", @id = "HourEnd" })
                                @Html.ValidationMessageFor(model => model.HourEnd, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-8">
                            <div class="form-group">
                                <div class="control-label">Responsable:</div>
                                <select class="select2" onchange="filtrarPersona(this.value)" id="filtropersona" data-placeholder="Seleccione" name="IdPersonEmployee"></select>
                                @Html.HiddenFor(model => model.IdPersonEmployee, new { @id = "IdPersonEmployee," })
                                @Html.ValidationMessageFor(model => model.IdPersonEmployee, "", new { @class = "text-danger" })

                            </div>
                        </div>


                    </div>
                    <div class="row pt-2 pb-3">

                        <div class="col-md-12">

                            <div class="accordion border" id="accordionTaskPerson">
                                <div class="card collapsed-card">
                                    <div class="card-header" id="headingPerson">
                                        <h2 class="mb-0">
                                            <button class="btn btn-link text-decoration-none" type="button" data-toggle="collapse" data-target="#collapseCardTaskPerson" aria-expanded="false" aria-controls="collapseTaskPerson">
                                                Colaboradores/Seguidores
                                            </button>
                                        </h2>
                                    </div>

                                    <div id="collapseCardTaskPerson" class="collapse" aria-labelledby="headingTaskPerson" data-parent="#accordionTaskPerson">

                                        <div class="card-body">


                                            <div class="row">
                                                <div class="col-8">
                                                    <div class="form-group">
                                                        <div class="control-label">Colaborador:</div>
                                                        <select class="select2" onchange="filtrarColaborador(this.value)" id="filtroColaborador" data-placeholder="Seleccione"></select>
                                                        @*@Html.HiddenFor(model => model.IdPersonEmployee, new { @id = "IdPersonColaborador," })
                                                            @Html.ValidationMessageFor(model => model.IdPersonEmployee, "", new { @class = "text-danger" })*@

                                                    </div>
                                                </div>


                                                <div class="col-md-4">
                                                    <div class="form-group">
                                                        @*<div class="btn_option"><a id="addRow"><i class="fas fa-plus"></i></a></div>*@
                                                        <div class="btn_option"><a onclick="addRow();"><i class="fas fa-plus"></i></a></div>
                                                    </div>
                                                </div>
                                            </div>
                                            @*<hr>*@
                                            <div class="row pt-3">
                                                <div class="col-md-12">
                                                    <div class="form-group">
                                                        <div class="table-responsive">
                                                            <div class="container">

                                                                <table id="TTaskPerson" class="table table-bordered table-striped">
                                                                    <thead class="font-weight-bold">
                                                                        <tr>
                                                                            <td style="display:none;">colHid_indexCell</td>
                                                                            <td style="display:none;">colHid_IdPersonEmployee</td>
                                                                            <td style="display:none;">colHid_PersonEmployeeName</td>
                                                                            <td>Nombre</td>
                                                                            <td>Opciones</td>
                                                                        </tr>
                                                                    </thead>
                                                                    <tbody id="BodyPersonEmployee">
                                                                        @if (Model != null)
                                                                        {
                                                                            if (Model.listTaskPerson != null)
                                                                            {
                                                                                string idRow;
                                                                                string idCol;
                                                                                string nameCol_IdPersonEmploye;
                                                                                string nameCol_PersonEmployeeName;
                                                                                string nameCol_NumIdentification;

                                                                                for (var i = 0; i < Model.listTaskPerson.Count; i++)
                                                                                {
                                                                                    idRow = "trTaskPerson" + i.ToString();
                                                                                    idCol = "listTaskPerson_" + i.ToString();
                                                                                    nameCol_NumIdentification = "listTaskPerson[" + i.ToString() + "].NumIdentification";
                                                                                    nameCol_IdPersonEmploye = "listTaskPerson[" + i.ToString() + "].IdPersonEmployee";
                                                                                    nameCol_PersonEmployeeName = "listTaskPerson[" + i.ToString() + "].PersonEmployeeName";


                                                                                    var Name = " ";
                                                                                    if (@Model.listTaskPerson[i].PersonEmployeeName != "")
                                                                                    {
                                                                                        Name = " " + @Model.listTaskPerson[i].PersonEmployeeName;
                                                                                    }

                                                                                    string strNombre = @Model.listTaskPerson[i].NumIdentification + " - " + @Model.listTaskPerson[i].PersonEmployeeLastName + @Name;

                                                                                    <tr id='@idRow'>
                                                                                        <td style="display:none;"><input name="listPersonContact.Index" type="hidden" value='@i' /></td>
                                                                                        <td style="display:none;"><input id='@idCol' name='@nameCol_NumIdentification' type="hidden" value='@Model.listTaskPerson[i].NumIdentification' /></td>
                                                                                        <td style="display:none;"><input id='@idCol' name='@nameCol_IdPersonEmploye' type="hidden" value='@Model.listTaskPerson[i].IdPersonEmployee' /></td>
                                                                                        <td style="display:none;"><input id='@idCol' name='@nameCol_PersonEmployeeName' type="hidden" value='@Model.listTaskPerson[i].PersonEmployeeName' /></td>
                                                                                        <td name="PersonEmploye">@strNombre </td>
                                                                                        <td><div class="btn_option pt-0"><a class="deleteRow" onclick="deleteRow('@i');"><i class="far fa-trash-alt"></i></a></div></td>
                                                                                    </tr>

                                                                                }
                                                                            }
                                                                        }
                                                                    </tbody>
                                                                </table>

                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>

                                        </div>

                                    </div>
                                </div>
                            </div>

                        </div>

                    </div>


                    <div class="row">
                        <div class="col-md-offset-2 col-md-10">
                            <div class="form-group">
                                <div class="text-center">
                                    @*<a href="location.href='@Url.Action("Create", "Client")';return false;" class="white_btn">Grabar</a>*@
                                    <button class="white_btn" type="submit">Grabar</button>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-10 text-center">
                            @*<span class="text-success">@ViewBag.SuccessSave</span>*@
                            @*<span class="text-danger">@ViewBag.ErrorSave</span>*@
                        </div>
                    </div>
                </div>
            </div>
        }

        <div>
            @Html.ActionLink("Regresar a la Lista", "ListTask")
        </div>

    </div>
</div>

@section Scripts {
    <link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
    <script src="https://code.jquery.com/jquery-1.12.4.js"></script>
    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
    <script src="~/Content/assets/plugins/datatables/jquery.dataTables.min.js"></script>
    <script src="~/Content/assets/plugins/datatables-bs4/js/dataTables.bootstrap4.min.js"></script>
    <script src="~/Content/assets/plugins/datatables-responsive/js/dataTables.responsive.min.js"></script>
    <script src="~/Content/assets/plugins/datatables-responsive/js/responsive.bootstrap4.min.js"></script>
    <script src="~/Content/assets/plugins/datatables-buttons/js/dataTables.buttons.min.js"></script>
    <script src="~/Content/assets/plugins/datatables-buttons/js/buttons.bootstrap4.min.js"></script>
    <script src="~/Content/assets/plugins/datatables-buttons/js/buttons.html5.min.js"></script>
    <script src="~/Content/assets/plugins/datatables-buttons/js/buttons.print.min.js"></script>
    <script src="~/Content/assets/plugins/datatables-buttons/js/buttons.colVis.min.js"></script>
    <script src="~/Content/assets/plugins/datatables-buttons/js/buttons.colVis.min.js"></script>
    <script src="~/Content/assets/plugins/select2/js/select2.full.min.js"></script>


    <script>
        var ListPersons = [];
        var ListTask = [];
        var ListServices = [];

            //----------------------------------------------------------------

            //Mensaje de confirmacion--------------------
            if ("@ViewBag.SuccessSave"!=""){
                toastr.success("@ViewBag.SuccessSave");
            }
            if ("@ViewBag.ErrorSave" != ""){
                toastr.error("@ViewBag.ErrorSave");
            }
            //-------------------------------------------

        function ObtenerTask() {
            /*debugger;*/
             $.ajax({
                type: "GET",
                url: '@Url.Action("GetListTask", "Task")',
                data: "{}",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                //global: false,
                //async: false,
                success: function (data) {
                    $.each(data, function (idx, Tsk) {
                        ListTask.push(Tsk.IdTask.toString());
                    });
                }
            });
        }

        function ObtenerServices() {
            /*debugger;*/
             $.ajax({
                type: "GET",
                url: '@Url.Action("GetListServiceRequest", "ServiceRequest")',
                data: "{}",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                //global: false,
                //async: false,
                success: function (data) {
                    $.each(data, function (idx, Serv) {
                        ListServices.push(Serv.IdServiceRequest.toString());
                    });
                }
            });
        }

        function ObtenerPersonas() {

            ListPersons = $.ajax({
                type: "GET",
                url: '@Url.Action("GetListPerson", "Person")?idPersonType=2',
                data: "{}",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                //global: false,
                //async: false,
                success: function (data) {
                    var itemArray = {};
                    itemArray.IdPerson = "";
                    itemArray.LastName = "";
                    itemArray.Name = "";
                    itemArray.NumIdentification = "";
                    data.push(itemArray);
                    data.reverse();
                    ListPersons = data;

                    if (ListPersons.length > 0) {
                        var persona = $("#filtropersona")[0];
                        var option = $(document.createElement('option'));
                        option.text("Seleccione");
                        option.val("0");
                        $("#filtropersona").append(option);

                        for (i = 0; i < ListPersons.length; i++) {

                            if (ListPersons[i].IdPerson != "" && ListPersons[i].LastName != "") {
                                var Name = " ";
                                if (ListPersons[i].Name != "")
                                {
                                    Name = " "+ListPersons[i].Name;
                                }

                                persona[i + 1] = new Option(ListPersons[i].NumIdentification + " - " + ListPersons[i].LastName + Name , ListPersons[i].IdPerson, "", "");

                            }

                        }
                          persona.value = "@Model.IdPersonEmployee";
                        filtrarPersona("@Model.IdPersonEmployee");

                        var Colaborador = $("#filtroColaborador")[0];
                        var option = $(document.createElement('option'));
                        option.text("Seleccione");
                        option.val("0");
                        $("#filtroColaborador").append(option);

                        for (i = 0; i < ListPersons.length; i++) {

                            if (ListPersons[i].IdPerson != "" && ListPersons[i].LastName != "") {
                                var Name = " ";
                                if (ListPersons[i].Name != "") {
                                    Name = " " + ListPersons[i].Name;
                                }

                                Colaborador[i + 1] = new Option(ListPersons[i].NumIdentification + " - " + ListPersons[i].LastName + Name, ListPersons[i].IdPerson, "", "");

                            }

                            }
                    }
                }
            });
        }

        ObtenerTask();
        ObtenerServices();
        ObtenerPersonas();

        function cargarDataPerson(IdPerson, lstPersons) {
            if (IdPerson == "" || IdPerson == "0") { return false; }
            //debugger;
            var objPerson = lstPersons.find((m) => m.IdPerson == IdPerson);
            var fecha = new Date();
        }

        function filtrarPersona(person) {
            /*debugger;*/
            var SelecCodeValue = person.trim();
            cargarDataPerson(SelecCodeValue, ListPersons);
        }

        function filtrarColaborador(Colaborador) {
            /*debugger;*/
            var SelecCodeValue = Colaborador.trim();
            cargarDataPerson(SelecCodeValue, ListPersons);
        }

        $('#TTask').on("click", "button.editRow", function () {
            var data = table.row($(this).parents("tr")).data();
            $("#hidd_IdTask").val(data.IdTask);
            $("#submit").val("editRow");
            location.href = '@Url.Action("ListTask", "Task")';
        });

        $('#TTask').on("click", "button.searchRow", function () {
            var data = table.row($(this).parents("tr")).data();
            $("#hidd_IdTask").val(data.IdTask);
            $("#submit").val("searchRow");
            location.href = '@Url.Action("ListTask", "Task")';
        });

        $(document).ready(function () {

            /*debugger;*/


            var search = $("#IdFatherTask");
            search.on('focus', function () {
                /*debugger;*/
                search.autocomplete({
                    source: ListTask //<-- pasamos un array de strings
                });

            });

            var searchS = $("#IdServiceRequest");
            searchS.on('focus', function () {
                /*debugger;*/
                searchS.autocomplete({
                    source: ListServices //<-- pasamos un array de strings
                });

            });

            $("#IdServiceRequest").blur(function () {
                var valorS = document.getElementById("IdServiceRequest");
                if (valorS.value != "") {
                    var objLi = ListServices;
                    var objServices = objLi.find(m => m == valorS.value);
                    if (objServices == undefined) {

                        $("#IdServiceRequest").val("");
                        toastr.error("No existe el servicio");

                    }

                }
            });

            $("#IdFatherTask").blur(function () {
                var valor = document.getElementById("IdFatherTask");
                if (valor.value != "") {
                    var objLi = ListTask;
                    var objFather = objLi.find(m => m == valor.value);
                    if (objFather == undefined) {

                        $("#IdFatherTask").val("");
                        toastr.error("No existe el ticket Padre");

                    }

                }
            });

            //Validacion de fecha--------------------------------------------
            var today = new Date();
            var dd = today.getDate();
            var mm = today.getMonth() + 1; //January is 0!
            var yyyy = today.getFullYear();
            if (dd < 10) {
                dd = '0' + dd
            }
            if (mm < 10) {
                mm = '0' + mm
            }

            today = yyyy + '-' + mm + '-' + dd;
            document.getElementById("dttDateIni").setAttribute("min", today);
            document.getElementById("dttDateEnd").setAttribute("min", today);
            //----------------------------------------------------------------

            $('.select2').select2({ width: '100%' });

            $("#lst_Priority").on('change', function () {
                var selectValue = $(this).val();
                //$("#inpIdIdentificationType").val(selectValue);
                changeCodeInputHiddenList("lst_Priority", "inIdPriority", selectValue);
            });

            $("#lst_IdStatus").on('change', function () {
                var selectValue = $(this).val();
                //$("#inpIdIdentificationType").val(selectValue);
                changeCodeInputHiddenList("lst_IdStatus", "inIdStatus", selectValue);
            });

            $("#lst_IdTypeTask").on('change', function () {
                var selectValue = $(this).val();
                //$("#inpIdIdentificationType").val(selectValue);
                changeCodeInputHiddenList("lst_IdTypeTask", "inIdTypeTask", selectValue);
            });

            $.ajax({
                type: "GET",
                url: '@Url.Action("GetTableCatalog", "TableCatalog")?idTable=' +"PRIORITYTASK",
                data: "{}",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (msg) {

                    var option = $(document.createElement('option'));
                    option.text("Seleccione");
                    option.val("0");
                    $("#lst_Priority").append(option);

                    $(msg).each(function () {
                        var option = $(document.createElement('option'));

                        option.text(this.DetailDesc);
                        option.val(this.IdCatalogDetail); //Identity

                        $("#lst_Priority").append(option);
                    });

                    document.getElementById('lst_Priority').value = "0";

                    changeCodeInputHiddenList("lst_Priority", "inIdPriority", "");

                },
                error: function (msg) {
                    $("#error > span").text("Error al llenar lista de prioridad");
                }

            });

            $.ajax({
                type: "GET",
                 url: '@Url.Action("GetTableCatalog", "TableCatalog")?idTable=' +"STATETASK",
                data: "{}",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (msg) {

                    var option = $(document.createElement('option'));
                    option.text("Seleccione");
                    option.val("0");
                    $("#lst_IdStatus").append(option);

                    $(msg).each(function () {
                        var option = $(document.createElement('option'));

                        option.text(this.DetailDesc);
                        option.val(this.IdCatalogDetail); //Identity

                        $("#lst_IdStatus").append(option);
                    });

                    document.getElementById('lst_IdStatus').value = "0";

                    changeCodeInputHiddenList("lst_IdStatus", "inIdStatus", "");

                },
                error: function (msg) {
                    $("#error > span").text("Error al llenar lista de Estado");
                }

            });

            $.ajax({
                type: "GET",
                 url: '@Url.Action("GetTableCatalog", "TableCatalog")?idTable=' +"TYPETASK",
                data: "{}",
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (msg) {

                    var option = $(document.createElement('option'));
                    option.text("Seleccione");
                    option.val("0");
                    $("#lst_IdTypeTask").append(option);

                    $(msg).each(function () {
                        var option = $(document.createElement('option'));

                        option.text(this.DetailDesc);
                        option.val(this.IdCatalogDetail); //Identity

                        $("#lst_IdTypeTask").append(option);
                    });

                    document.getElementById('lst_IdTypeTask').value = "0";

                    changeCodeInputHiddenList("lst_IdTypeTask", "inIdTypeTask", "");

                },
                error: function (msg) {
                    $("#error > span").text("Error al llenar lista de Tipos de tarea");
                }

            });

            function changeCodeInputHiddenList(idDropDownList, idInputHidden, valCode) {
                //debugger;
                if (valCode === "") {

                    var CodeAntSelected = document.getElementById(idInputHidden).value;

                    if (CodeAntSelected != "") {
                        $("#" + idDropDownList + " option[value='" + CodeAntSelected + "']").attr("selected", true);
                        $("#" + idInputHidden).val(CodeAntSelected);
                    }
                    else {
                        var CodeActual = $("#" + idDropDownList).val();
                        $("#" + idInputHidden).val(CodeActual);
                    }

                }
                else {
                    $("#" + idInputHidden).val(valCode);
                }

            }

            $("#dttDateIni").change(function () {
                var startDate = new Date($('#dttDateIni').val());
                var endDate = new Date($('#dttDateEnd').val());


                if (startDate > endDate) {
                    $('#dttDateEnd').val($('#dttDateIni').val());
                    toastr.error("La fecha inicial No puede ser Mayor a la fecha Final");
                    return;
                }
            });

            $("#dttDateEnd").change(function () {
                /*debugger;*/
                var startDate = new Date($('#dttDateIni').val());
                var endDate = new Date($('#dttDateEnd').val());

                if (startDate > endDate) {

                    $('#dttDateIni').val($('#dttDateEnd').val());

                    toastr.error("La fecha inicial No puede ser Mayor a la fecha Final");
                    return;
                }
            });

            $("#HourIni").change(function () {
                var startDate = new Date($('#dttDateIni').val());
                var endDate = new Date($('#dttDateEnd').val());
                var IniHour = $('#HourIni').val();
                var IniEnd = $('#HourEnd').val();

                if (startDate = endDate && IniHour > IniEnd) {

                    $('#HourIni').val($('#HourEnd').val());

                    toastr.error("La Hora inicial No puede ser Mayor a la Hora Final");
                    return;
                }
            });

            $("#HourEnd").change(function () {

                var startDate = new Date($('#dttDateIni').val());
                var endDate = new Date($('#dttDateEnd').val());
                var IniHour = $('#HourIni').val();
                var IniEnd = $('#HourEnd').val();

                if (startDate = endDate && IniHour > IniEnd) {

                    $('#HourIni').val($('#HourEnd').val());

                    toastr.error("La Hora inicial No puede ser Mayor a la Hora Final");
                    return;
                }
            });
        });

        function deleteRow(id) {
            var controlToBeRemoved = "#trTaskPerson" + id;
            $(controlToBeRemoved).remove();
        }

         function addRow() {


            @{
                Model.listTaskPerson.Add(new MTaskPerson());
            }

            //obtenemos los valores a insertar
            var strIdPerson = $("#filtroColaborador").val();
            var strPerson = $('select[id="filtroColaborador"] option:selected').text();

            //debugger;
            if (strPerson != "") {

                //-------------------------

                var index = document.getElementById('TTaskPerson').rows.length;
                //alert(index);

                var colHid_indexCell = "<td style='display:none'><input name='listTaskPerson.Index' type = 'hidden' value = '" + index + "' /></td > ";
                var colHid_IdPersonEmployee = "<td style='display:none'><input id='listTaskPerson_" + index + "' name = 'listTaskPerson[" + index + "].IdPersonEmployee' type='hidden' value='" + strIdPerson + "' /></td> ";
                var colHid_IdPersonNumIdentification = "<td style='display:none'><input id='listTaskPerson_" + index + "' name = 'listTaskPerson[" + index + "].NumIdentification' type='hidden' value='" + strIdPerson + "' /></td> ";
                var colHid_PersonEmployeeName = "<td style='display:none'><input id='listTaskPerson_" + index + "' name = 'listTaskPerson[" + index + "].PersonEmployeeName' type = 'hidden' value = '" + strPerson + "' /></td> ";

                /*debugger;*/
                var colPersonEmployeeName = "<td name ='PersonEmploye'>" + strPerson + "</td> ";
                var colDelete = "<td><div class='btn_option pt-0'><a class='deleteRow' onclick='deleteRow(" + index + ");'><i class='far fa-trash-alt'></i></a></div></td> ";


                //Si el numero a insertar ya existe lo elimina para luego volver a insertarlo y asi evitar duplicados
                var isFound = doSearchForDelete(strPerson, "PersonEmploye");
                //alert(isFound);

                //insertamos los valores en la tabla
                var newRow = "<tr id='trTaskPerson" + index + "'>" +
                    colHid_indexCell + colHid_IdPersonEmployee + colHid_IdPersonNumIdentification + colHid_PersonEmployeeName + colPersonEmployeeName + colDelete + "</tr>";
                //debugger;
                $("#TTaskPerson").append(newRow);

                //--------------------------

                //limpiamos los valores ya agregados
                document.getElementById('filtroColaborador').value = "";
            }

        }

        function doSearchForDelete(searchText, colName) {

            const tableReg = document.getElementById('TTaskPerson');
            let position = 0;
            let found = false;
            //debugger;
            // Recorremos todas las filas con contenido de la tabla
            for (let i = 1; i < tableReg.rows.length; i++) {

                const cellsOfRow = tableReg.rows[i].getElementsByTagName('td');
                let searchCol = colName; //+ i.toString();
                const compareWith = cellsOfRow[searchCol].innerHTML.toLowerCase();

                // Buscamos el texto en el contenido de la celda y capturamos la posicion de la fila
                if (compareWith.indexOf(searchText.toLowerCase()) > -1) {
                    found = true;
                    position = i;
                    break;
                }
            }

            //si lo encontro, se elimina
            if (found) { document.getElementById('TTaskPerson').deleteRow(position); }

            return found;
        }

        function searchDescription(code, idList) {
            //debugger;
            var Description = $("#" + idList + " option[value='" + code + "']").text();
            //alert(Description);
            return Description;
        }


    </script>
}
